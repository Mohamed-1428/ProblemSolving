 static string removeFirstAppearance(string mainStr, string deletedStr)
        {
            if (mainStr == deletedStr) return "";
            int startCut = indexOf(mainStr, deletedStr);
            if (startCut == -1 || deletedStr.Length == 0) return mainStr;

            string result = "";

            // 1) Saleem  :: Sal
            if (startCut == 0)
            {
                for (int i = deletedStr.Length; i < mainStr.Length; i++)
                    result += mainStr[i];
            }

            //2) saleem :: al
            else if (startCut + deletedStr.Length - 1 < mainStr.Length - 1)
            {
                for (int i = 0; i < startCut; i++)
                    result += mainStr[i];

                for (int i = startCut + deletedStr.Length; i < mainStr.Length; i++)
                    result += mainStr[i];
            }
            // 3)saleem :: m
            // if (startCut > 0 && startCut + deletedStr.Length - 1 == mainStr.Length - 1)
            else
            {
                for (int i = 0; i < startCut; i++)
                    result += mainStr[i];
            }

            return result;
        }

static int indexOf(string haystack, string needle)
        {
            if (needle.Length == 0) return 0;
            if (needle.Length > haystack.Length) return -1;
            if (haystack == needle) return 0;

            int counter = 0, oldIndex = 0;

            for (int i = 0; i < haystack.Length; i++)
            {
                oldIndex = i;
                if (haystack[i] == needle[0] && i <= haystack.Length - needle.Length)
                {
                    if ((i == haystack.Length - 1) && (counter == needle.Length)) return i;
                    for (int j = 0; j < needle.Length; j++)
                    {
                        if (haystack[i] == needle[j])
                        {
                            counter++;
                            i++;
                        }
                        else
                        {
                            i = oldIndex;
                            break;
                        }
                    }
                    if (counter == needle.Length) return oldIndex;
                    i = oldIndex;
                    counter = 0;
                }
            }
            return -1;
        }
