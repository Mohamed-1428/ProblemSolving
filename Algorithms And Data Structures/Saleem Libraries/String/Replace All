static char ToLower(char c) => (int)c >= 65 && (int)c <= 90 ? (char)((int)c + 32) : c;
static bool IsLetter(char c) => c >= 97 && (int)c <= 122 || (int)c >= 65 && (int)c <= 90;
static string ToLower(string s)
        {
            string result = "";

            for (int i = 0; i < s.Length; i++)
                if (IsLetter(s[i]))
                    result += ToLower(s[i]);
                else
                    result += s[i];

            return result;
        }
static char ToLower(char c) => (int)c >= 65 && (int)c <= 90 ? (char)((int)c + 32) : c;
static string RemoveWithCount(string s, int startIndex, int count)
        {
            string result = "";

            for (int i = 0; i < startIndex; i++)
                result += s[i];

            for (int i = startIndex + count; i < s.Length; i++)
                result += s[i];

            return result;
        }
static string InsertAtPosition(string s, int insertPostion, string stringToInsert)
        {
            string result = "";

            if (insertPostion == 0)
                return stringToInsert + s;
            if (insertPostion == s.Length)
                return s + stringToInsert;

            //insert inside
            for (int i = 0; i < insertPostion; i++)
                result += s[i];

            result += stringToInsert;

            for (int i = insertPostion; i < s.Length; i++)
                result += s[i];

            return result;
        }
static int IndexOf(string haystack, string needle)
        {
            if (needle.Length == 0) return 0;
            if (needle.Length > haystack.Length) return -1;
            if (haystack == needle) return 0;

            int counter = 0, oldIndex = 0;

            for (int i = 0; i < haystack.Length; i++)
            {
                oldIndex = i;
                if (haystack[i] == needle[0] && i <= haystack.Length - needle.Length)
                {
                    if ((i == haystack.Length - 1) && (counter == needle.Length)) return i;
                    for (int j = 0; j < needle.Length; j++)
                    {
                        if (haystack[i] == needle[j])
                        {
                            counter++;
                            i++;
                        }
                        else
                        {
                            i = oldIndex;
                            break;
                        }
                    }
                    if (counter == needle.Length) return oldIndex;
                    i = oldIndex;
                    counter = 0;
                }
            }
            return -1;
        }
static string Replace(string s, string stringToReplace, string sRepalceTo, bool matchCase = true)
        {
            int indexStringToReplace = -1;

            if (matchCase)
                indexStringToReplace = IndexOf(s, stringToReplace);
            else
                indexStringToReplace = IndexOf(SaleemString.ToLower(s), SaleemString.ToLower(stringToReplace));


            if (indexStringToReplace != -1)
            s = InsertAtPosition(RemoveWithCount(s, indexStringToReplace, stringToReplace.Length),
                                 indexStringToReplace, sRepalceTo);

            return s;
        }
static string ReplaceAll(string s, string stringToReplace, string sRepalceTo, bool matchCase = true)
        {
            if (!matchCase)
            {
                s = SaleemString.ToLower(s);
                stringToReplace = SaleemString.ToLower(stringToReplace);
            }

            while (IndexOf(s, stringToReplace) > -1)
                s = Replace(s, stringToReplace, sRepalceTo);

            return s;
        }
