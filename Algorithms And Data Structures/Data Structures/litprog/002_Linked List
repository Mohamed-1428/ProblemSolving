using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;

namespace lab
{
    class Program
    {
        static void Main()
        {
            SaleemList saleemList = new SaleemList();

            saleemList.addFirst(1);
            saleemList.append(2);
            saleemList.append(3);
            saleemList.print();


            Console.WriteLine();
            Console.WriteLine("IndexOf 2 is: {0}", saleemList.indexOf(2));
            Console.WriteLine("IndexOf 5 is: {0}", saleemList.indexOf(5));

            Console.WriteLine();
            //int nodeIndex = 5;         
            int nodeIndex = 2;
            if (nodeIndex > saleemList.Length)
                Console.WriteLine("Index {0} is Out Of Range!!", nodeIndex);
            else
                Console.WriteLine("Element With Index {0} is: {1}", nodeIndex, saleemList.getNodeByIndex(nodeIndex).Value);

            Console.WriteLine();
            Console.WriteLine("After Delete 1");
            saleemList.delete(1);
            saleemList.print();
        }
        public class Node
        {
            public int Value { get; set; }
            public Node Next { get; set; }
        }
        public class SaleemList
        {
            public int Length { get; set; }
            public Node Head { get; set; }
            public Node Tail { get; set; }

            public void addFirst(int value)
            {
                Node newNode = new Node();
                newNode.Value = value;
                newNode.Next = Head;
                Head = newNode;
                Length++;
            }
            public void append(int value)
            {
                Node newNode = new Node();
                newNode.Value = value;

                if (Length == 0)
                    Head = newNode;
                else
                {
                    Node current = Head;

                    for (int i = 0; i < Length - 1; i++)
                        current = current.Next;

                    current.Next = newNode;
                }

                Length++;
            }
            public int indexOf(int value)
            {
                Node current = Head;

                for (int i = 0; i < Length; i++)
                    if (current.Value == value)
                        return i;
                    else
                        current = current.Next;

                return -1;
            }
            public Node getNodeByIndex(int index)
            {
                Node result = new Node(),
                     current = Head;

                for (int i = 0; i < Length; i++)
                    if (i == index)
                    {
                        result = current;
                        break;
                    }
                    else
                        current = current.Next;

                return result;
            }

            public void delete(int value)
            {
                if (Length == 0)
                {
                    Console.WriteLine("cannot Delete From Empty List!!");
                    return;
                }

                Node current = Head, prev = Head;

                for (int i = 0; i < Length; i++)
                {
                    if (current.Value == value)
                    {
                        if (i == 0)
                            Head = Head.Next;
                        else
                            prev.Next = current.Next;

                        current = null;
                        Length--;
                        return;
                    }
                    else
                    {
                        prev = current;
                        current = current.Next;
                    }
                }

                Console.WriteLine("Element Doesnot Exsist!!");
            }
            public void print()
            {
                Node current = Head;

                Console.Write("Head-> ");
                for (int i = 0; i < Length; i++)
                {
                    Console.Write(current.Value + " -> ");
                    current = current.Next;
                }
                Console.WriteLine("Null");
            }

        }
    }
}
