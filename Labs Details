        public KPI putKPI(string user, int id, KPI kpi)
        {
            string pattern = "(\\sIF\\s\\(\\s)(.+)(\\s,\\s)(.+)(\\s,\\s)(.+)(\\s\\))$";
            Regex.IsMatch(kpi.Sql, pattern);
            string sl2 = kpi.Sql.ToString();
            string sl = Regex.Replace(kpi.Sql, pattern, m => " CASE WHEN " + m.Groups[2].Value + " THEN " + m.Groups[4].Value + " ELSE " + m.Groups[6].Value + " END ");
            string s2 = "";
            string s = "";
            if (sl2.Length > 3500 && sl2.Length < 7000)
            {
                s2 = "to_clob('" + sl2.Substring(0, 3500) + "') || to_clob('" +
                     sl2.Substring(3500) + "')";
            }
            else if (sl2.Length >= 7000 && sl2.Length < 10500)
            {
                s2 = "to_clob('" + sl2.Substring(0, 3500) + "') || to_clob('" +
                     sl2.Substring(3500, 3500) + "') || to_clob('" + sl2.Substring(7000) + "')";
            }
            else
            {
                s2 = "'" + sl2 + "'";
            }
            if (sl.Length > 3500 && sl.Length < 7000)
            {
                s = "to_clob('" + sl.Substring(0, 3500) + "') || to_clob('" +
                    sl.Substring(3500) + "')";
            }
            else if (sl.Length >= 7000 && sl.Length < 10500)
            {
                s = "to_clob('" + sl.Substring(0, 3500) + "') || to_clob('" +
                    sl.Substring(3500, 3500) + "') || to_clob('" + sl.Substring(7000) + "')";
            }
            else
            {
                s = "'" + sl + "'";
            }
            kpi.Sql = s;
            kpi.SqlC = s2;
            OracleConnection oraconn = new OracleConnection(ConfigurationManager.ConnectionStrings["TECH"].ConnectionString);
            OracleCommand cmdDeleteSubsets = oraconn.CreateCommand();
            OracleCommand cmdDeleteCounters = oraconn.CreateCommand();
            OracleCommand cmdDeleteKpis = oraconn.CreateCommand();
            OracleCommand cmdUpdateMeasures = oraconn.CreateCommand();
            OracleCommand cmd = oraconn.CreateCommand();

            var isAccepted = !kpi.Is_Public;
            cmdDeleteSubsets.CommandText =
                $@"DELETE FROM {HttpContext.Current.Items["mask"]}_META_KPIS_SUBSETS WHERE KPI_ID = {id}";
            cmdDeleteCounters.CommandText =
                $@"DELETE FROM {HttpContext.Current.Items["mask"]}_META_KPIS_COUNTERS WHERE KPI_ID = {id}";
            cmdDeleteKpis.CommandText =
                $@"DELETE FROM {HttpContext.Current.Items["mask"]}_META_KPIS_KPIS WHERE KPI_ID = {id}";
            cmdUpdateMeasures.CommandText =
                $@"UPDATE {HttpContext.Current.Items["mask"]}_META_MEASURES SET NAME = '{kpi.Name}', SQL = '{kpi.Sql}', SUBSETS = '" +
                (kpi.Tables_Names.Aggregate((i, j) => i.Trim() + "," + j ?? j.Trim())) + "' WHERE SOURCE_ID = " + id;
            cmd.CommandText =
                $@"UPDATE {HttpContext.Current.Items["mask"]}_META_KPIS SET IS_ACCEPTED = {(kpi.Is_Public ? "0" : "1")}, NAME = '{kpi.Name}', CODE = '{kpi.Code}', CATEGORY_ID = {kpi.Category_Id}, TECHNOLOGY_ID = {kpi.Technology_Id}, SQL = {kpi.Sql}, SQLC = {kpi.SqlC}, IS_PUBLIC= {(kpi.Is_Public ? "1" : "0")}, DOMAIN_ID = {kpi.Domain_Id} WHERE ID = {id}";
            oraconn.Open();
            if (cmd.ExecuteNonQuery() > 0)
            {
                cmdDeleteSubsets.ExecuteNonQuery();
                cmdDeleteCounters.ExecuteNonQuery();
                cmdDeleteKpis.ExecuteNonQuery();
                cmdUpdateMeasures.ExecuteNonQuery();
                OracleCommand cmd3 = oraconn.CreateCommand();
                foreach (int i in kpi.Counters)
                {
                    cmd3.CommandText = "insert into " + HttpContext.Current.Items["mask"] + "_META_KPIs_Counters values (" + kpi.Id + "," + i + ")";
                    cmd3.ExecuteNonQuery();
                }
                foreach (int i in kpi.Kpis)
                {
                    cmd3.CommandText = "insert into " + HttpContext.Current.Items["mask"] + "_META_KPIs_KPIS values (" + kpi.Id + "," + i + ")";
                    cmd3.ExecuteNonQuery();
                }

                foreach (string i in kpi.Subsets)
                {
                    if (i != null)
                    {
                        cmd3.CommandText = "insert into " + HttpContext.Current.Items["mask"] + "_META_KPIs_Subsets values (" + kpi.Id + ",'" + i + "')";
                        cmd3.ExecuteNonQuery();
                    }
                }
                oraconn.Close();
                kpi.CreatedBy = user;
                if (kpi.Is_Public)
                {
                    EmailRepository emailRepo = new EmailRepository();
                    emailRepo.sendPendingKpiEmail(kpi);
                }
                return kpi;

            }
            else
            {
                oraconn.Close();
                return null;
            }
        }
